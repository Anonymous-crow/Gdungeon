name: Build Release Package

on:
  push:
    tags:
      - "v*.*.*"
      - "rc*"

jobs:
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        cpp_compiler: [g++, cl]
        include:
          - os: windows-latest
            cpp_compiler: cl
            c_compiler: cl
          - os: ubuntu-latest
            cpp_compiler: g++
            c_compiler: gcc
        exclude:
          - os: windows-latest
            cpp_compiler: gcc
          - os: ubuntu-latest
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: install sqlite3
        if: matrix.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: sqlite3 libsqlite3 libsqlite3-dev
          version: 4.0
          # execute_install_scripts: true
        
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        if: startsWith(github.ref, 'refs/tags/v')
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_DOCS=OFF
          -S ${{ github.workspace }}

      - name: Build Package
        if: startsWith(github.ref, 'refs/tags/v')
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }} 
          --config Release --target package

      - name: Collect Packages
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          make_latest: true
          generate_release_notes: true
          files: |
            package/Gdungeon-*.*.*

      - name: Configure Prerelease CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        if: startsWith(github.ref, 'refs/tags/rc')
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=Debug
          -S ${{ github.workspace }}

      - name: Build Prerelease Package
        if: startsWith(github.ref, 'refs/tags/rc')
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }} 
          --config Debug --target package

      - name: Collect Prerelease Packages
        if: startsWith(github.ref, 'refs/tags/rc')
        uses: softprops/action-gh-release@v2
        with:
          make_latest: false
          generate_release_notes: true
          prerelease: true
          files: |
            package/Gdungeon-*.*.*

  build-docs:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: install sqlite3
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: sqlite3 libsqlite3 libsqlite3-dev doxygen
          version: 4.0
          # execute_install_scripts: true
      
      - name: Cache Docs Deps
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies

      - name: Add Docs Deps
        run: pip install -r requirements.txt

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_DOCS=ON
          -S ${{ github.workspace }}

      - name: Build Docs
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }} 
          --config Release --target docs

      - name: Move Docs
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/docs/build/html

  deploy-docs:
    if: github.ref == 'refs/heads/main'
    # Add a dependency to the build job
    needs: build-docs

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
